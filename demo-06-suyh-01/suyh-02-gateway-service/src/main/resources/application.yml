
server:
  port: 9201
spring:
  application:
    # 当前服务名称
    name: gateway-service

eureka:
  instance:
    # 主机名
    hostname: localhost
    instanceId: ${spring.application.name}:${server.port} # 指定实例ID,就不会显示主机名了
    preferIpAddress: true     #访问路径可以显示IP地址
  client:
    registerWithEureka: true # 服务注册开关
    fetchRegistry: true # 服务发现开关
    serviceUrl:
      # 连接到单机版注册中心地址
      defaultZone: http://localhost:8761/eureka/

# 网关的默认访问地址： http://gatewayHostName:gatewayPort/service-id/**
#     示例: http://localhost:9201/sso-service/login
#     这种方式可以通过配置 ignored-patterns 属性来禁止，过滤掉。
# 还有一种访问地址就是Zuul 配置了映射地址的path(/gateway/sso/**) 的
#     示例：http://localhost:9201/gateway/sso/login

# 自定义路由映射
zuul:
  routes:
    # 以 /gateway/sso/ 开头的api 地址都会被转到 order-service 微服务
    # 同时，在默认情况下。这些前缀将会被去掉，然后再以后面的路径去访问实际的微服务API
    # 例如: localhost/gateway/sso/login 到 sso-service 的路径就是: localhost/login
    sso-service:
      path: /gateway/sso/** # 过滤访问路径
      serviceId: sso-service # 指定服务ID，会自动从Eureka中找到此服务的ip和端口
  # 统一入口为上面的配置，其他入口忽略
  # 禁止用户使用微服务名称来访问接口(前提是每一个微服务名都是以 -service 为后缀)，
  # 而必须使用网关路由配置给出的配置进行访问，需要添加下面这个配置
  # 这一个的忽略是防止人使用微服务名称加API 路径来访问
  # 加上这个配置则会提示 404
  # 因为在正常情况下，我们还可以通过指定微服务名再加上API 地址就可以绕过网关直接访问目标微服务。
  ignored-patterns: /*-service/**

  # 禁止通过网关访问的微服务
  # 忽略整个服务不对外提供接口
  # 那么这些微服务的接口就只能通过原始的微服务路径访问
  # ignored-services: order-service

  # 处理http 请求头为空的问题，这个属性会过滤掉一些HEADERS 里面的某些KEY 值过滤掉，不往下游传递。
  # 这里给这个过滤的值为空，也就是说不对任何KEY 进行过滤，全部往下游传递
  sensitive-headers:


