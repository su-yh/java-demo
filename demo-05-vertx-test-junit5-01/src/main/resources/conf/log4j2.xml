<?xml version="1.0" encoding="UTF-8"?>

<!-- status：Log4j内部事件记录的等级，只对Log4j本身的事件有效。  -->
<!-- monitorInterval：Log4j 2 定期检查和应用配置文件的时间间隔（单位：秒，如果更改配置文件，不用重启系统）。  -->
<Configuration status="info" monitorInteval="60">

    <!--
    Loggers标签说明：
        它被用来配置LoggerConfig，包含一个root logger和若干个普通logger
        普通必须有一个name元素，root logger不用name元素
        每个logger可以指定一个level（TRACE, DEBUG, INFO, WARN, ERROR, ALL or OFF），不指定时level默认为ERROR
        additivity指定是否同时输出log到父类的appender，缺省为true。（层级关系与Java包类似，例如：com.foo是com.foo.Bar的父级；java是java.util的父级，是java.util.vector的祖先。root是最顶层。）
        每个logger可以包含若干个属性：AppenderRef, Filter, Layout, 等
    -->
    <Loggers>
        <Root level="trace">
            <AppenderRef ref="async"/>
            <AppenderRef ref="console"/>
        </Root>
        <Logger name="mybatis" level="DEBUG"/>
    </Loggers>
    <!--
        Appenders标签说明：
            Appender用来定义不同的输出位置，可以是console、文件、远程socket服务器、Apache Flume、JMS以及远程 UNIX 系统日志守护进程。
            一个Logger可以绑定多个不同的Appender。
    -->
    <Appenders>
        <Console name="console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{-5p} [%pid:%t] %c{20}:%L --- %msg%n%ex"/>
        </Console>
        <RollingFile name="fixedTimeFileAppender" fileName="logs/suyhdemo.log"
                     filePattern="logs/demo-verx.log.%d{yyyy-MM-dd}.%i.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p [%pid:%t] %c{20}:%L --- %msg%n%ex"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="200 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="24"/>
        </RollingFile>
        <Async name="async" bufferSize="512">
            <AppenderRef ref="fixedTimeFileAppender"/>
        </Async>
    </Appenders>
</Configuration>

